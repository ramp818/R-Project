survivorsperboat<-as.data.frame(survivorsperboat)
survivorsperboat$boat<-table(titanic$boat)
survivorsperboat$deads<-as.numeric(survivorsperboat$boat-survivorsperboat$survivorsperboat)
frequency<-sum(survivorsperboat$deads)/sum(survivorsperboat$boat)
#some of the data that actually is categorical is coded as numeric, this code adds them ass categorical
titanic = mutate(titanic,passengerclass = fct_recode(as.factor(pclass),
"1st" = "1", "2nd" = "2", "3rd" = "3"),
survival = fct_recode(as.factor(survived),
"died"="0","survived" = "1"))
dim(titanic) #we now have 16 variables
names(titanic) #see the names
count(titanic,passengerclass) #count the number of passengers in each class
count(titanic,survival) #count the number of survived and died
nPerGender <-count(titanic,sex) #count the number of men and women
tapply(titanic$fare, titanic$passengerclass, range,na.rm = TRUE)
summary(titanic$fare)
hist(titanic$fare)
View(titanic)
#barplot of men and women
ggplot(titanic) +
geom_bar(aes(x = sex,fill =sex))
#twice as much men as women
nGenderSurvival <- count(titanic,sex,survival) #how many men survived/died and how many women survived/died
#plot of men and women and if the died or not
ggplot(titanic) +
geom_bar(aes(sex,fill=survival))
#for proportions instead
ggplot(titanic) +
geom_bar(aes(sex,fill = survival),position = "fill")
#mosaic plot
ggplot(titanic) +
geom_mosaic(aes(x = product(sex),fill = survival)) +
labs(x = "Gender",y = "Proportion that survived")
#one of the interesting things to check if wether the survival is different in the classes
ggplot(titanic) +
geom_bar(aes(sex,fill = survival), position = "fill") +
facet_wrap( ~ passengerclass) +
labs(y="Survived/lived", title = "Gender and survival by class")
#easy to see that the passengerclass greatly influenced the survival for men and women
#more so between the 1st and 2,3 for men and 1,2 and 3 for women.
#age distribution by sex
ggplot(titanic) +
geom_histogram(aes(x = age,fill = sex), bins = 35,na.rm = TRUE)
#fare distribution by class
ggplot(titanic) +
geom_histogram(aes(x = fare,fill = passengerclass), bins = 25,na.rm = TRUE)
#https://bio304-class.github.io/bio304-fall2017/data-story-titanic.html
#
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survived, age, color = sex), width = 0.1, alpha = 0.5)
#died and survived by age and gender
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survival, age, color = sex), width = 0.1, alpha = 0.5) +
facet_wrap(~sex)
#probability of surviving by age and gender
titanic %>%
filter(!is.na(age)) %>%
ggplot(aes(x = age, y = survived, color = sex)) +
geom_jitter(height = 0.05, alpha = 0.35) +
geom_smooth(method="glm", method.args = list(family="binomial"))  +
facet_wrap(~sex) +
labs(x = "Age", y = "Probability of survival")
#probability of surviving by age and gender broken down by passenger class
titanic %>%
filter(!is.na(age)) %>%
ggplot(aes(x = age, y = survived, color = sex)) +
geom_jitter(height = 0.05, alpha = 0.35) +
geom_smooth(method="glm", method.args = list(family="binomial"))  +
facet_grid(passengerclass~sex) +
labs(x = "Age", y = "Probability of survival")
#### create a data frame to identify families
library("data.table")
titanic2<-titanic[,c(2,6,7,9,8)]
unique(titanic$ticket)
titanic2<-as.data.table(titanic2)
families<-titanic2[,.(count=.N,price=sum(fare),surv=sum(survived)),by="ticket"]
##plot to see how the people was traveling
families$count<-as.numeric(families$count)
families$surv<-as.numeric(families$surv)
families<-subset(families,families$count>1)
scatter.smooth(families$surv,families$count)
###################################end of the descriptive model###############################
maleData <- titanic[  titanic$sex=="male" , ]
femaleData <- titanic[  titanic$sex=="female" , ]
runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
source("Titanic.R")
runApp()
runApp()
runApp("Titanic.R")
runApp("Titanic.R")
setwd("~/Documents/GitHub/Titanic")
rm(list =ls()) #remove all objects
#load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(tidyr)
library(forcats)
library(ggmosaic)
library(shiny)
titanic = read.csv("titanic.csv",header = TRUE,sep = ";") #read the datafile
titanic = titanic[-nrow(titanic),] #remove last line that is only NA
titanic$age = as.vector(titanic$age) #make age to a vector
titanic$age[titanic$age == ""] = NA #remove the empty strings for age and replace with NA
titanic$age = gsub(",",".",titanic$age) #change the seperator to . instead of ,
titanic$age = as.numeric(titanic$age) #change the vector to numeric
titanic$age = round(titanic$age) #round up
titanic$fare = gsub(",",".",titanic$fare) #change seperator
titanic$fare = as.vector(titanic$fare) #make into a vector
titanic$fare[titanic$fare == ""] = NA #make missing values NA
titanic$fare = as.numeric(titanic$fare) #make numeric
class(titanic$fare)
#cleaning the mistakes in boats
titanic$boat<-gsub("13 15","13",titanic$boat)
titanic$boat<-gsub("13 15 B","13",titanic$boat)
titanic$boat<-gsub("13 B","13",titanic$boat)
titanic$boat<-gsub("5 7","5",titanic$boat)
titanic$boat<-gsub("5 9","9",titanic$boat)
titanic$boat<-gsub("15 16","15",titanic$boat)
titanic$boat<-gsub("8 10","8",titanic$boat)
#i am changing the columns A,B,C,D for numbers so it will be easy to plot
titanic$boat<-gsub("C D","C",titanic$boat)
titanic$boat<-gsub("A","17",titanic$boat)
titanic$boat<-gsub("B","18",titanic$boat)
titanic$boat<-gsub("C","19",titanic$boat)
titanic$boat<-gsub("D","20",titanic$boat)
titanic$boat<-ifelse(titanic$boat=="","NA",titanic$boat)
titanic$boat<-as.numeric(titanic$boat)
levels(titanic$boat)
table(titanic$boat)
###SURVIVORS PER BOAT
survivorsperboat<-tapply(titanic$survived,titanic$boat,sum)
survivorsperboat<-as.data.frame(survivorsperboat)
survivorsperboat$boat<-table(titanic$boat)
survivorsperboat$deads<-as.numeric(survivorsperboat$boat-survivorsperboat$survivorsperboat)
frequency<-sum(survivorsperboat$deads)/sum(survivorsperboat$boat)
#some of the data that actually is categorical is coded as numeric, this code adds them ass categorical
titanic = mutate(titanic,passengerclass = fct_recode(as.factor(pclass),
"1st" = "1", "2nd" = "2", "3rd" = "3"),
survival = fct_recode(as.factor(survived),
"died"="0","survived" = "1"))
dim(titanic) #we now have 16 variables
names(titanic) #see the names
count(titanic,passengerclass) #count the number of passengers in each class
count(titanic,survival) #count the number of survived and died
nPerGender <-count(titanic,sex) #count the number of men and women
tapply(titanic$fare, titanic$passengerclass, range,na.rm = TRUE)
summary(titanic$fare)
hist(titanic$fare)
View(titanic)
#barplot of men and women
ggplot(titanic) +
geom_bar(aes(x = sex,fill =sex))
#twice as much men as women
nGenderSurvival <- count(titanic,sex,survival) #how many men survived/died and how many women survived/died
#plot of men and women and if the died or not
ggplot(titanic) +
geom_bar(aes(sex,fill=survival))
#for proportions instead
ggplot(titanic) +
geom_bar(aes(sex,fill = survival),position = "fill")
#mosaic plot
ggplot(titanic) +
geom_mosaic(aes(x = product(sex),fill = survival)) +
labs(x = "Gender",y = "Proportion that survived")
#one of the interesting things to check if wether the survival is different in the classes
ggplot(titanic) +
geom_bar(aes(sex,fill = survival), position = "fill") +
facet_wrap( ~ passengerclass) +
labs(y="Survived/lived", title = "Gender and survival by class")
#easy to see that the passengerclass greatly influenced the survival for men and women
#more so between the 1st and 2,3 for men and 1,2 and 3 for women.
#age distribution by sex
ggplot(titanic) +
geom_histogram(aes(x = age,fill = sex), bins = 35,na.rm = TRUE)
#fare distribution by class
ggplot(titanic) +
geom_histogram(aes(x = fare,fill = passengerclass), bins = 25,na.rm = TRUE)
#https://bio304-class.github.io/bio304-fall2017/data-story-titanic.html
#
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survived, age, color = sex), width = 0.1, alpha = 0.5)
#died and survived by age and gender
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survival, age, color = sex), width = 0.1, alpha = 0.5) +
facet_wrap(~sex)
#probability of surviving by age and gender
titanic %>%
filter(!is.na(age)) %>%
ggplot(aes(x = age, y = survived, color = sex)) +
geom_jitter(height = 0.05, alpha = 0.35) +
geom_smooth(method="glm", method.args = list(family="binomial"))  +
facet_wrap(~sex) +
labs(x = "Age", y = "Probability of survival")
#probability of surviving by age and gender broken down by passenger class
titanic %>%
filter(!is.na(age)) %>%
ggplot(aes(x = age, y = survived, color = sex)) +
geom_jitter(height = 0.05, alpha = 0.35) +
geom_smooth(method="glm", method.args = list(family="binomial"))  +
facet_grid(passengerclass~sex) +
labs(x = "Age", y = "Probability of survival")
#### create a data frame to identify families
library("data.table")
titanic2<-titanic[,c(2,6,7,9,8)]
unique(titanic$ticket)
titanic2<-as.data.table(titanic2)
families<-titanic2[,.(count=.N,price=sum(fare),surv=sum(survived)),by="ticket"]
##plot to see how the people was traveling
families$count<-as.numeric(families$count)
families$surv<-as.numeric(families$surv)
families<-subset(families,families$count>1)
scatter.smooth(families$surv,families$count)
###################################end of the descriptive model###############################
maleData <- titanic[  titanic$sex=="male" , ]
femaleData <- titanic[  titanic$sex=="female" , ]
runApp()
save.image("~/Documents/GitHub/Titanic/V.RData")
runApp()
runApp()
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
load.Rdata( filename="V.RData")
load("~/Documents/GitHub/Titanic/V.RData")
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
load("V.RData")
runApp()
runApp()
runApp()
save.image("~/Documents/GitHub/Titanic/Data.RData")
source("helpers.R")
data <- readRDS("counties.RData")
getwd
getwd()
ls()
load("Data.RDATA")
load("Data.RDATA")
runApp()
runApp()
load("Data.RDATA")
data <- load("Data.RDATA")
load("Data.RDATA")
load("Data.RDATA")
load("Data.RDATA")
load("Data.RDATA")
titanic = read.csv("titanic.csv",header = TRUE,sep = ";") #read the datafile
saveRDS(titanic, file = "titanic.rds")
saveRDS(families, file = "families.rds")
saveRDS(femaleData, file = "femaleData.rds")
saveRDS(maleData, file = "maleData.rds")
readRDS("titanic.rds")
readRDS("titanic.rds")
titanic <- readRDS("titanic.rds")
runApp()
load("~/Documents/GitHub/Titanic/V.RData")
saveRDS(titanic2, file = "titanic2.rds")
saveRDS(nGenderSurvival, file = "nGenderSurvival.rds")
titanic <- readRDS("titanic.rds")
runApp()
titanic <- readRDS("titanic.rds")
femaleData <- readRDS("femaleData.rds")
maleData <- readRDS("maleData.rds")
runApp()
View(titanic)
#some of the data that actually is categorical is coded as numeric, this code adds them ass categorical
titanic = mutate(titanic,passengerclass = fct_recode(as.factor(pclass),
"1st" = "1", "2nd" = "2", "3rd" = "3"),
survival = fct_recode(as.factor(survived),
"died"="0","survived" = "1"))
#some of the data that actually is categorical is coded as numeric, this code adds them ass categorical
titanic = mutate(titanic,passengerclass = fct_recode(as.factor(pclass),
"1st" = "1", "2nd" = "2", "3rd" = "3"),
survival = fct_recode(as.factor(survived),
"died"="0","survived" = "1"))
runApp()
load("~/Documents/GitHub/Titanic/V.RData")
runApp()
load("/Data/Titanic.RData")
getwd()
load("~/Data/Titanic.RData")
load("~/Documents/GitHub/Titanic/Data/Titanic.RData")
load("~/Documents/GitHub/Titanic/Data/Titanic.RData")
load("~/Documents/GitHub/Titanic/Data/Titanic.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
load("~/Documents/GitHub/Titanic/Data/Titanic.RData")
runApp()
count(titanic,passengerclass) #count the number of passengers in each class
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
source("./Data/Titanic.RData")
runApp()
load("~/Documents/GitHub/Titanic/Data/Titanic.RData")
runApp()
runApp()
runApp()
#one of the interesting things to check if wether the survival is different in the classes
ggplot(titanic) +
geom_bar(aes(sex,fill = survival), position = "fill") +
facet_wrap( ~ passengerclass) +
labs(y="Survived/lived", title = "Gender and survival by class")
runApp()
#age distribution by sex
ggplot(titanic) +
geom_histogram(aes(x = age,fill = sex), bins = 35,na.rm = TRUE)
#fare distribution by class
ggplot(titanic) +
geom_histogram(aes(x = fare,fill = passengerclass), bins = 25,na.rm = TRUE)
#
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survived, age, color = sex), width = 0.1, alpha = 0.5)
runApp()
runApp()
#
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survived, age, color = sex), width = 0.1, alpha = 0.5)
#died and survived by age and gender
titanic %>%
filter(!is.na(age)) %>%
ggplot() +
geom_jitter(aes(survival, age, color = sex), width = 0.1, alpha = 0.5) +
facet_wrap(~sex)
#probability of surviving by age and gender
titanic %>%
filter(!is.na(age)) %>%
ggplot(aes(x = age, y = survived, color = sex)) +
geom_jitter(height = 0.05, alpha = 0.35) +
geom_smooth(method="glm", method.args = list(family="binomial"))  +
facet_wrap(~sex) +
labs(x = "Age", y = "Probability of survival")
families<-titanic2[,.(count=.N,price=sum(fare),surv=sum(survived)),by="ticket"]
##plot to see how the people was traveling
families$count<-as.numeric(families$count)
families$surv<-as.numeric(families$surv)
families<-subset(families,families$count>1)
scatter.smooth(families$surv,families$count)
#### create a data frame to identify families
library("data.table")
titanic2<-titanic[,c(2,6,7,9,8)]
unique(titanic$ticket)
titanic2<-as.data.table(titanic2)
families<-titanic2[,.(count=.N,price=sum(fare),surv=sum(survived)),by="ticket"]
##plot to see how the people was traveling
families$count<-as.numeric(families$count)
families$surv<-as.numeric(families$surv)
families<-subset(families,families$count>1)
runApp()
runApp()
#one of the interesting things to check if wether the survival is different in the classes
ggplot(titanic) +
geom_bar(aes(sex,fill = survival), position = "fill") +
facet_wrap( ~ passengerclass) +
labs(y="Survived/lived", title = "Gender and survival by class")
#age distribution by sex
ggplot(titanic) +
geom_histogram(aes(x = age,fill = sex), bins = 35,na.rm = TRUE)
#fare distribution by class
ggplot(titanic) +
geom_histogram(aes(x = fare,fill = passengerclass), bins = 25,na.rm = TRUE)
runApp()
runApp()
runApp()
setwd("~/Desktop/Fundamentals of statistics/Assignments/dataset for assignments/HF")
# 1) Import the "toy_HF" dataset from the folder HF, using the first row as column titles (0.5 point)
records <- read.table('toy_HF.txt', header = TRUE)
# 2) What are the sizes of the dataset? (0.5 points)
dim(records)
#Could also use
nrow(records)
ncol(records)
# 3) Extract the "age", "sex", and "adm_number" columns, and give the new dataset the column's names "AGE", "SEX" and "nADM" (2 point)
# Note: once you build the new dataset, use the command "x <- as.data.frame(x)" to make it a data.frame
records[,2:4]
x <- as.data.frame(records[,2:4])
colnames(x) <- c("AGE","SEX","nADM")
# 4) How many patients have 1 admission? How many 2? How many 3?  (1.5 points)
length(which(x$nADM == 1))
length(which(x$nADM == 2))
length(which(x$nADM == 3))
# 5) What is the percentage of readmitted patients in the dataset?   (1 point)
n <- nrow(x)
num.readmitted <- (length(which(x$nADM > 1))/n)*100
# 6) Select the age of patients at their first admission (1.5 points)
age.at.first.admission <- subset(x, nADM == 1, select = AGE)
# 7) Compute the mean of the AGE vector. Use help command, if needed  (0.5 points)
age.mean <- mean(age.at.first.admission$AGE)
# 3) Extract the "age", "sex", and "adm_number" columns, and give the new dataset the column's names "AGE", "SEX" and "nADM" (2 point)
# Note: once you build the new dataset, use the command "x <- as.data.frame(x)" to make it a data.frame
records[,2:4]
# 8) Compute the mean age of men and women at their first hospitalization. What is higher? (2.5 points)
# Note: men have sex=1
attach(x)
# 7) Compute the mean of the AGE vector. Use help command, if needed  (0.5 points)
age.mean <- mean(age.at.first.admission$AGE)
# 8) Compute the mean age of men and women at their first hospitalization. What is higher? (2.5 points)
# Note: men have sex=1
attach(x)
comparison <- as.data.frame(tapply(AGE, SEX, mean),col.names = c("WOMEN","MEN"))
detach(x)
comparison
# 8) Compute the mean age of men and women at their first hospitalization. What is higher? (2.5 points)
# Note: men have sex=1
attach(x)
comparison <- as.data.frame(tapply(AGE, SEX, mean))
detach(x)
comparison
# 8) Compute the mean age of men and women at their first hospitalization. What is higher? (2.5 points)
# Note: men have sex=1
attach(x)
comparison <- tapply(AGE, SEX, mean)
detach(x)
comparison
colnames(comparison) <- c("Women","Men")
tapply(AGE, SEX, mean)
tapply(AGE, SEX, mean)
# 8) Compute the mean age of men and women at their first hospitalization. What is higher? (2.5 points)
# Note: men have sex=1
attach(x)
tapply(AGE, SEX, mean)
detach(x)
comparison <- as.data.frame(tapply(AGE, SEX, mean))
View(comparison)
colnames(comparison) <- "Mean"
row.names(comparison) <- c("Women","Men")
View(comparison)
# 1) Import the "toy_HF" dataset from the folder HF, using the first row as column titles (0.5 point)
records <- read.table('toy_HF.txt', header = TRUE)
# 2) What are the sizes of the dataset? (0.5 points)
dim(records)
#Could also use
nrow(records)
ncol(records)
# 3) Extract the "age", "sex", and "adm_number" columns, and give the new dataset the column's names "AGE", "SEX" and "nADM" (2 point)
# Note: once you build the new dataset, use the command "x <- as.data.frame(x)" to make it a data.frame
records[,2:4]
x <- as.data.frame(records[,2:4])
colnames(x) <- c("AGE","SEX","nADM")
# 4) How many patients have 1 admission? How many 2? How many 3?  (1.5 points)
length(which(x$nADM == 1))
length(which(x$nADM == 2))
length(which(x$nADM == 3))
# 5) What is the percentage of readmitted patients in the dataset?   (1 point)
n <- nrow(x)
num.readmitted <- (length(which(x$nADM > 1))/n)*100
# 6) Select the age of patients at their first admission (1.5 points)
age.at.first.admission <- subset(x, nADM == 1, select = AGE)
# 7) Compute the mean of the AGE vector. Use help command, if needed  (0.5 points)
age.mean <- mean(age.at.first.admission$AGE)
# 8) Compute the mean age of men and women at their first hospitalization. What is higher? (2.5 points)
# Note: men have sex=1
attach(x)
comparison <- as.data.frame(tapply(AGE, SEX, mean))
colnames(comparison) <- "Mean"
row.names(comparison) <- c("Women","Men")
detach(x)
runApp('~/Documents/GitHub/Titanic')
load("~/Documents/GitHub/Titanic/Data/Titanic.RData")
setwd("~/Documents/GitHub/Titanic")
runApp()
runApp()
